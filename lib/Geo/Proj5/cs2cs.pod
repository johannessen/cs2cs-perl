=head1 NAME

Geo::Proj5::cs2cs - Perl IPC interface to PROJ cs2cs

=head1 VERSION

version 0.00

=head1 SYNOPSIS

 use Geo::Proj5::cs2cs;
 
 $cs2cs = Geo::Proj5::cs2cs->new("EPSG:25833" => "EPSG:4326");
 $point = $cs2cs->transform( [500_000, 6094_800] );  # UTM 33U
 # result geographic lat, lon: [55.0, 15.0]
 
 @points_utm = ([500_000, 6094_800], [504_760, 6093_880]);
 @points_geo = $cs2cs->transform( @points_geo );
 
 $params = {-r => 1};  # control parameter -r: reverse input coords
 $cs2cs = Geo::Proj5::cs2cs->new("EPSG:4326" => "EPSG:25833", $params);
 $point = $cs2cs->transform( [q(15d4'28"E), q(54d59'30"N)] );
 # result easting, northing: [504763.08827, 6093866.63099]
 
 # old PROJ string syntax
 $source_crs = '+init=epsg:4326';
 $target_crs = '+proj=merc +lon_0=110';
 $cs2cs = Geo::Proj5::cs2cs->new($source_crs => $target_crs);
 ...

=head1 DESCRIPTION

This module is a Perl L<interprocess communication|perlipc> interface
to the L<cs2cs(1)|https://proj.org/apps/cs2cs.html> utility, which
is a part of the L<PROJ|https://proj.org/> coordinate transformation
library.

Unlike L<Geo::Proj4>, this module is pure Perl. It does require the
PROJ library to be installed, but it does not use the PROJ API
S<via XS>. Instead, it communicates with the C<cs2cs> utility using
the standard input/output streams, just like you might do at a
command line. Data is formatted using C<sprintf> and parsed using
regular expressions.

As a result, this module may be expected to work with many different
versions of the PROJ library, whereas L<Geo::Proj4> is limited to
S<version 4> (at time of this writing). However, this module is
definitely less efficient and possibly also less robust with regards
to potential changes to the C<cs2cs> input/output format.

This software has pre-release quality.
There is no schedule for further development.

=head1 METHODS

L<Geo::Proj5::cs2cs> implements the following methods.

=head2 new

 $cs2cs = Geo::Proj5::cs2cs->new($source_crs => $target_crs);

Construct a new L<Geo::Proj5::cs2cs> object that can transform points
from the specified source CRS to the target CRS (coordinate reference
system).

Each CRS may be specified using any method the PROJ version installed
on your system supports for the C<cs2cs> utility. The legacy "PROJ
string" format is currently supported on all PROJ versions:

 $source_crs = '+init=epsg:4326';
 $target_crs = '+proj=merc +lon_0=110';
 $cs2cs = Geo::Proj5::cs2cs->new($source_crs => $target_crs);

S<PROJ 6> and newer support additional formats to express a CRS,
such as a WKT string or an AUTHORITY:CODE. Note that the axis order
might differ between some of these choices. See your PROJ version's
L<cs2cs(1)|https://proj.org/apps/cs2cs.html> documentation for
details.

Control parameters may optionally be supplied to C<cs2cs> in a
hash ref using one of the following forms:

 $cs2cs = Geo::Proj5::cs2cs->new(\%params, $source_crs => $target_crs);
 $cs2cs = Geo::Proj5::cs2cs->new($source_crs => $target_crs, \%params);

Each of the C<%params> hash's keys represents a single control
parameter. Parameters are supplied exactly like in a C<cs2cs>
call on a command line, with a leading C<->. The value must be a
C<defined> value; a value of C<undef> will unset the parameter.

 %params = (
   -I => '',      # inverse ON (switch $source_crs and $target_crs)
   -f => '%.5f',  # output format (5 decimal digits)
   -r => undef,   # reverse coord input OFF (the default)
 );

See the L</"CONTROL PARAMETERS"> section below for implementation
details of specific control parameters.

=head2 transform

 $point_1 = [$x1, $y1];
 $point_2 = [$x2, $y2, $z2, $aux];
 @input_points  = ( $point_1, $point_2, ... );
 @output_points = $cs2cs->transform( @input_points );
 
 # transforming coordinates of just a single point:
 $output_point = $cs2cs->transform( [$x3, $y3, $z3] );

Execute C<cs2cs> to perform a CRS transformation of the specified
point or points. At least two coordinates (x/y) are required, a third
(z) may optionally be supplied.

Additionally, auxiliary data may be included in a fourth array
element. Just like C<cs2cs>, this value is simply passed through from
the input point to the output point. L<Geo::Proj5::cs2cs> doesn't
stringify this value for C<cs2cs>, so you can safely use Perl
references as auxiliary data, even blessed ones.

Coordinates are stringified for C<cs2cs> as numbers with I<at least>
the same precision as specified in the C<-f> control parameter.
If C<-f> is explicitly given as C<undef>, coordinates will be passed
through as string, which enables the use of the C<cs2cs> DMS format
S<( C<"3d6.2'E"> )>.

Each point in a list is a simple unblessed array reference. When just
a single input point is given, C<transform()> may be called in scalar
context to directly obtain a reference to the output point. For lists
of multiple input points, calling in scalar context is prohibited.

=head2 version

 $version = Geo::Proj5::cs2cs->version;

Attempt to determine the version of PROJ installed on your system.

=head1 CONTROL PARAMETERS

L<Geo::Proj5::cs2cs> implements special handling for the following
control parameters. Parameters not mentioned here are passed on to
C<cs2cs> as-is. See your PROJ version's
L<cs2cs(1)|https://proj.org/apps/cs2cs.html> documentation for a
full list of supported options.

=head2 -E

 Geo::Proj5::cs2cs->new({-E => ''}, ...);  # fails

The C<-E> parameter disrupts parsing of the transformation result
and is unsupported.

=head2 -d

 Geo::Proj5::cs2cs->new({-d => 7}, ...);

Fully supported shorthand to C<-f %f>. Specifies the number of
decimals in the output.

=head2 -f

 Geo::Proj5::cs2cs->new({-f => '%.7f'}, ...);

Fully supported (albeit with the limitations inherent in C<cs2cs>).
Specifies a printf format string to control the output values.

For L<Geo::Proj5::cs2cs>, the default value is currently C<'%.12g'>,
which allows easy further processing with Perl while keeping loss of
floating point precision low enough for any cartographic use case.
To enable the C<cs2cs> DMS string format (C<54d59'30.43"N>), you
need to explicitly unset this parameter. This will make C<cs2cs> use
its built-in default format.

=head2 -t

 Geo::Proj5::cs2cs->new({-t => '#'}, ...);  # fails

The C<-t> parameter disrupts parsing of the transformation result
and is unsupported.

=head2 -v

 Geo::Proj5::cs2cs->new({-v => ''}, ...);  # fails

The C<-v> parameter disrupts parsing of the transformation result
and is unsupported.

=head2 XS

 Geo::Proj5::cs2cs->new({XS => 0}, ...);

There is a small chance that future versions of L<Geo::Proj5::cs2cs>
might automatically switch to an XS implementation if a suitable
third-party module is installed (such as L<Geo::Proj4>). This might
improve speed dramatically, but it might also change some of the
semantics of this module's interface in certain edge cases. If this
matters to you, you can already now opt out of this behaviour by
setting the internal parameter C<XS> to a defined non-truthy value.

=head1 DIAGNOSTICS

L<Geo::Proj5::cs2cs> dies as soon as an error condition is
discovered. Use C<eval>, L<Try::Tiny> or similar to catch this.

=head1 BUGS

This software doesn't exist yet. There is only draft documentation.

It would make sense for this module to live in the C<Geo::PROJ>
namespace (perhaps as C<Geo::PROJ::cs2cs>). However, that namespace
collides with the unrelated C<Geo::Proj> module on case-insensitive
file systems. Using the C<Geo::Proj5> namespace doesn't really make
sense because this module is not limited to any particular PROJ
version.

That said, the C<Geo::Proj5> namespace does imply compatibility
with PROJ versions more modern than S<version 4>. As an alternative,
the name C<Geo::LibProj::cs2cs> was considered and even deemed more
suitable in the abstract, but it might have a greater risk of
conflicting with future efforts to improve PROJ support in Perl.
With S<PROJ 5> having for the most part just been a transitional
version, the C<Geo::Proj5> namespace may reasonably be expected to
remain unaffected by such efforts.

=head1 AUTHOR

Arne Johannessen <ajnn@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is Copyright (c) 2020 by Arne Johannessen.

This is free software, licensed under:

 The Artistic License 2.0 (GPL Compatible)

=cut
